//----------------------------------------------------------------------------------
// Fragment shader for the "Custom" filter (last in the catalog)
//----------------------------------------------------------------------------------
// Available uniforms:
//
// uniform float     iTime       : time in seconds
// uniform int       iFrame      : frame since the filter started running
// uniform vec3      iResolution : viewport resultion in .xy, horizontal crop in .z 
// uniform float     iParam[2]   : UI slider positions (from 0.0 to 1.0)
// uniform sampler2D iChannel0   : the webcam image
// uniform sampler2D iChannel1   : 256x256 grayscale random numbers
//----------------------------------------------------------------------------------

// SOURCE: https://www.shadertoy.com/view/3dfyWj

mat3 kSobelH;
mat3 kSobelV;

float _2gray(vec4 rgb)
{
	return rgb.x * 0.2999+rgb.y*0.587+rgb.z*0.114;
}

vec4 _sampleColor(vec2 pos)
{
    if(pos.x < 0.0) pos.x *= -1.0;
    if(pos.y < 0.0) pos.y *= -1.0;
    if(pos.x > iResolution.x) pos.x -= iResolution.x;
    if(pos.y > iResolution.y) pos.y -= iResolution.y;
    vec2 uv = pos/iResolution.xy;
    return texture(iChannel0, uv);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
   	kSobelH[0]=vec3(-1, 0, 1);
   	kSobelH[1]=vec3(-2, 0, 2);
   	kSobelH[2]=vec3(-1, 0, 1);
    
    kSobelV[0]=vec3(-1, -2, -1);
   	kSobelV[1]=vec3( 0, 0, 0);
   	kSobelV[2]=vec3( 1, 2, 1);

    fragCoord.y = iResolution.y - fragCoord.y;
    
    vec2 sample_position = fragCoord;
    vec4 col = vec4(0);
    float magx = 0.0, magy = 0.0;
    for(int y = 0; y < 3; y++)
    {
        for(int x =0; x < 3; x++)
        {
            sample_position.x += float(x-1);
            sample_position.y += float(y-1);
            magx += _2gray(_sampleColor( sample_position )) * kSobelH[y][x];
            magy += _2gray(_sampleColor( sample_position )) * kSobelV[y][x];
            col.x = sqrt(pow(magx,2.0) + pow(magy,2.0));
            col.y = sqrt(pow(magx,2.0) + pow(magy,2.0));
            col.z = sqrt(pow(magx,2.0) + pow(magy,2.0));
        }
    }
    

    // Output to screen
    fragColor = col;
}